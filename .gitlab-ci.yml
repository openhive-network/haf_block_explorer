stages:
 - lint
 - build
 - test
 - cleanup

variables:
  # Variables required by Common CI jobs
  CI_COMMON_JOB_VERSION: "ae2ec71af47184cdd9567ae85ff821d133c3343f"
  DOCKER_BUILDER_TAG: "$CI_COMMON_JOB_VERSION"
  DOCKER_DIND_TAG: "$CI_COMMON_JOB_VERSION"
  IMAGE_REMOVER_TAG: "$CI_COMMON_JOB_VERSION"
  # Git configuration
  GIT_STRATEGY: clone
  GIT_SUBMODULE_STRATEGY: recursive
  # HAF configuration
  DATA_CACHE_HAF_PREFIX: "/cache/replay_data_haf_block_explorer_haf_${CI_COMMIT_SHA}"
  BLOCK_LOG_SOURCE_DIR_5M: /blockchain/block_log_5m

include:
  - template: Workflows/Branch-Pipelines.gitlab-ci.yml
  - project: hive/haf
    ref: 8a5bdf1a273e2fcf20353c73c50fea84970b8885 # develop
    file: /scripts/ci-helpers/prepare_data_image_job.yml

.lint_job:
  stage: lint
  variables:
    GIT_SUBMODULE_STRATEGY: none
  artifacts:
    name: lint-results
    when: always
  tags:
    - public-runner-docker

lint_bash_scripts:
  extends: .lint_job
  image: koalaman/shellcheck-alpine:latest
  before_script:
    - apk add xmlstarlet
  script:
    - find . -name .git -type d -prune -o -type f -name \*.sh -exec shellcheck -f checkstyle {} + | tee shellcheck-checkstyle-result.xml
  after_script:
    - xmlstarlet tr misc/checkstyle2junit.xslt shellcheck-checkstyle-result.xml > shellcheck-junit-result.xml
  artifacts:
    paths: 
      - shellcheck-checkstyle-result.xml
      - shellcheck-junit-result.xml
    reports:
      junit: shellcheck-junit-result.xml

lint_sql_scripts:
  extends: .lint_job
  image: 
    name: sqlfluff/sqlfluff:2.1.4
    entrypoint: [""]
  script:
    - sqlfluff lint --format yaml --write-output sql-lint.yaml
  artifacts:
    paths:
      - sql-lint.yaml

prepare_haf_image:
  stage: build
  extends: .prepare_haf_image
  variables:
    SUBMODULE_DIR: "$CI_PROJECT_DIR/submodules/haf"
    REGISTRY_USER: "$HAF_DEPLOY_USERNAME"
    REGISTRY_PASS: "$HAF_DEPLOY_TOKEN"
  before_script:
    - git config --global --add safe.directory $CI_PROJECT_DIR/submodules/haf
  tags:
    - public-runner-docker

prepare_haf_data:
  extends: .prepare_haf_data_5m
  needs:
    - job: prepare_haf_image
      artifacts: true
  stage: build
  variables:
    SUBMODULE_DIR: "$CI_PROJECT_DIR/submodules/haf"
    BLOCK_LOG_SOURCE_DIR: $BLOCK_LOG_SOURCE_DIR_5M
    CONFIG_INI_SOURCE: "$CI_PROJECT_DIR/submodules/haf/docker/config_5M.ini"
  resource_group: ${CI_COMMIT_SHA}
  tags:
    - data-cache-storage

.docker-base-build-template:
  extends: .docker_image_builder_job_template
  stage: build
  variables:
    BASE_REPO_NAME: ""
    BASE_TAG: ""
    NAME: ""
    TARGET: "$NAME"
  before_script:
    - !reference [.docker_image_builder_job_template, before_script]
    - |
      echo -e "\e[0Ksection_start:$(date +%s):login[collapsed=true]\r\e[0KLogging to Docker registry..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
      echo -e "\e[0Ksection_end:$(date +%s):login\r\e[0K"
  script:
    - |
      echo -e "\e[0Ksection_end:$(date +%s):tag\r\e[0K"
      echo -e "\e[0Ksection_start:$(date +%s):build[collapsed=true]\r\e[0KBaking $NAME${BASE_REPO_NAME:+/$BASE_REPO_NAME} image..."
      function image-exists() {
        local image=$1
        docker manifest inspect "$1" > /dev/null
        return $?
      }
      if image-exists "$CI_REGISTRY_IMAGE/$NAME${BASE_REPO_NAME:+/$BASE_REPO_NAME}:$BASE_TAG"; then
        echo "Image $CI_REGISTRY_IMAGE/$NAME${BASE_REPO_NAME:+/$BASE_REPO_NAME}:$BASE_TAG already exists. Skipping..."
      else
        echo "Baking $CI_REGISTRY_IMAGE/$NAME${BASE_REPO_NAME:+/$BASE_REPO_NAME} base image..."
        git config --global --add safe.directory $(pwd)
        docker buildx bake --progress=plain --provenance=false --push "$TARGET"
      fi
      echo -e "\e[0Ksection_end:$(date +%s):build\r\e[0K"
  tags:
    - public-runner-docker

docker-ci-runner-build:
  extends: .docker-base-build-template
  variables:
    BASE_REPO_NAME: ""
    BASE_TAG: "docker-24.0.1-2"
    NAME: "ci-runner"
    TARGET: "ci-runner-ci"

docker-psql-client-build:
  extends: .docker-base-build-template
  variables:
    BASE_REPO_NAME: ""
    BASE_TAG: "14"
    NAME: "psql"
    TARGET: "psql"

build_setup_docker_image:
  stage: build
  image: docker:24.0.6
  services:
    - docker:24.0.6-dind
  tags:
    - public-runner-docker
  variables:
    GIT_SUBMODULE_STRATEGY: none
    GIT_DEPTH: 1
  script:
    - "echo \"TRUNCATE TABLE hafbe_app.version; INSERT INTO hafbe_app.version(git_hash) VALUES ('$CI_COMMIT_SHA');\" > set_version_in_sql.pgsql"
    - "docker build --tag=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA --tag=$CI_REGISTRY_IMAGE:latest -f docker/Dockerfile ."
    - "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - "docker push --all-tags $CI_REGISTRY_IMAGE"

.test-template:
  extends: .docker_image_builder_job_template
  stage: test
  image: registry.gitlab.syncad.com/hive/haf_block_explorer/ci-runner:docker-24.0.1-2
  needs:
    - prepare_haf_image
    - prepare_haf_data
    - docker-psql-client-build
    - docker-ci-runner-build
  variables:
    HAF_COMMAND: --shared-file-size=1G --plugin database_api --replay --stop-replay-at-block=5000000
    HAF_REGISTRY: registry.gitlab.syncad.com/hive/haf/instance
    HAF_DATA_DIRECTORY: ${DATA_CACHE_HAF_PREFIX}_${HAF_COMMIT}/datadir
    HAF_SHM_DIRECTORY: ${DATA_CACHE_HAF_PREFIX}_${HAF_COMMIT}/shm_dir
    PGHERO_USERNAME: unused
    PGHERO_PASSWORD: unused
    POSTGRES_ACCESS: postgresql://haf_admin@docker:5432/haf_block_log
    COMMAND: SELECT CASE WHEN irreversible_block = 5000000 THEN 0 ELSE 1 END FROM hive.contexts WHERE name = 'hafbe_app';
    MESSAGE: Waiting for HAF Block Explorer to finish processing blocks...
    COMPOSE_OPTIONS_STRING: --project-name haf_be --env-file .env.local --file docker-compose.yml --file ci/docker-compose.yml --ansi never
  timeout: 2 hours
  before_script:
    - |
      echo -e "\e[0Ksection_start:$(date +%s):login[collapsed=true]\r\e[0KLogging to Docker registry..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
      echo -e "\e[0Ksection_end:$(date +%s):login\r\e[0K"
      echo -e "\e[0Ksection_start:$(date +%s):git[collapsed=true]\r\e[0KConfiguring Git..."
      git config --global --add safe.directory "$CI_PROJECT_DIR"
      git config --global --add safe.directory "$CI_PROJECT_DIR/submodules/haf"
      echo -e "\e[0Ksection_end:$(date +%s):git\r\e[0K"
  script:
    - |
      echo -e "\e[0Ksection_start:$(date +%s):compose[collapsed=true]\r\e[0KStarting the test environment..."

      cp /blockchain/block_log_5m/block_log docker/blockchain/block_log
      chmod a+w docker/blockchain/block_log

      pushd docker
      # Put all the variables that can be predefined in the "variables"
      # block and all the variables that have to be dynamically set by the script below
      {
        echo "HAF_VERSION=instance-$HAF_COMMIT"
        echo "HIVED_UID=$HIVED_UID"
        echo "SETUP_UID=$(id -u)"
      } > .env.local
      cat .env.local
      IFS=" " read -ra COMPOSE_OPTIONS <<< $COMPOSE_OPTIONS_STRING
      timeout -s INT -k 60 3540 docker compose ${COMPOSE_OPTIONS[@]} up --detach
      popd

      echo -e "\e[0Ksection_end:$(date +%s):compose\r\e[0K"
      echo -e "\e[0Ksection_start:$(date +%s):wait[collapsed=true]\r\e[0K$MESSAGE"

      until psql "$POSTGRES_ACCESS" --quiet --tuples-only --command="$COMMAND" | grep 0 &>/dev/null
      do 
        echo "$MESSAGE"
        sleep 3
      done
      echo "Block processing is finished."

      echo -e "\e[0Ksection_end:$(date +%s):wait\r\e[0K"
  after_script:
    - |
      echo -e "\e[0Ksection_start:$(date +%s):compose2[collapsed=true]\r\e[0KStopping test environment..."

      pushd docker
      IFS=" " read -ra COMPOSE_OPTIONS <<< $COMPOSE_OPTIONS_STRING
      docker compose "${COMPOSE_OPTIONS[@]}" logs haf > haf.log
      docker compose "${COMPOSE_OPTIONS[@]}" logs backend-setup > backend-setup.log
      docker compose "${COMPOSE_OPTIONS[@]}" logs backend-block-processing > backend-block-processing.log
      docker compose "${COMPOSE_OPTIONS[@]}" logs backend-postgrest > backend-postgrest.log
      docker compose "${COMPOSE_OPTIONS[@]}" down --volumes
      popd

      tar -czvf docker/container-logs.tar.gz $(pwd)/docker/*.log

      echo -e "\e[0Ksection_end:$(date +%s):compose2\r\e[0K"
  artifacts:
    expire_in: 1 week
    when: always
  resource_group: ${CI_COMMIT_SHA}
  tags:
    - data-cache-storage

regression-test:
  extends: .test-template
  script:
    - !reference [.test-template, script]
    - |
      echo -e "\e[0Ksection_start:$(date +%s):tests[collapsed=true]\r\e[0KRunning tests..."

      cd tests/account_parameters
      ./accounts_dump_test.sh --host=docker

      echo -e "\e[0Ksection_end:$(date +%s):tests\r\e[0K"
  artifacts:
    paths:
      - docker/container-logs.tar.gz
    expire_in: 1 week
    when: always

performance-test:
  extends: .test-template
  script:
    - !reference [.test-template, script]
    - |
      echo -e "\e[0Ksection_start:$(date +%s):tests[collapsed=true]\r\e[0KRunning tests..."

      ./tests/run_performance_tests.sh --postgresql-host=docker --postgrest-host=docker --database-size=6000 --test-loop-count=10000
      tar -czvf tests/performance/results.tar.gz $(pwd)/tests/performance/result*
      cat jmeter.log | python3 docker/ci/parse-jmeter-output.py
      m2u --input $(pwd)/tests/performance/result/result.xml --output $(pwd)/tests/performance/junit-result.xml

      echo -e "\e[0Ksection_end:$(date +%s):tests\r\e[0K"
  artifacts:
    paths:
      - docker/container-logs.tar.gz
      - tests/performance/result/result_report/
      - tests/performance/results.tar.gz
      - jmeter.log
    reports:
      junit: tests/performance/junit-result.xml

cleanup_haf_cache_manual:
  extends: .cleanup_cache_manual
  stage: cleanup
  variables:
    GIT_STRATEGY: none
    CLEANUP_PATH_PATTERN: "${DATA_CACHE_HAF_PREFIX}_*"
  resource_group: ${CI_COMMIT_SHA}
  tags:
    - data-cache-storage
